package com.pr.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.web.csrf.CsrfTokenRepository;
import org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository;

/**
 * Created by iuliana.cosmina on 9/14/15.
 * TODO 48. Complete definition of this class
 *  - add the proper annotation to mark this class as a Security Configuration class
 *  - configure an AuthenticationManager by completing the configureGlobal method body
 *   add the following username/password/roles:
 *   jane/ doe/ USER, ADMIN
 *   john/ doe/ USER
 *   admin/ admin/ADMIN
 *   - complete the definition of the configure method in order to implement the following:
 *      allow any user access to  resources,images, styles
 *      allow only ADMIN users to see the /person/newPerson menu option
 *      allow access to any other page for authenticated users
 *      set the form login to be the /auth view
 *      set the failure url to /auth?auth_error=1
 *      set the default page to be shown to the user after login to be /home
 *      set a logout URL to /logout
 *      set a CSRF token generated by the repository bean already defined for you
 */
@Configuration
@EnableWebSecurity
@EnableGlobalMethodSecurity(securedEnabled = true)
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    @Autowired
    public void configureGlobal(AuthenticationManagerBuilder auth) {
        try {
            auth.inMemoryAuthentication();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
                .authorizeRequests()
                // place url interceptors here
                .and()
            .formLogin()
                //place login form configuration here
                .and()
            .logout()
                //place logout details here
            .and()
               .csrf().csrfTokenRepository(repo());

    }

    @Bean
    public CsrfTokenRepository repo() {
        HttpSessionCsrfTokenRepository repo = new HttpSessionCsrfTokenRepository();
        repo.setParameterName("_csrf");
        repo.setHeaderName("X-CSRF-TOKEN");
        return repo;
    }

}
